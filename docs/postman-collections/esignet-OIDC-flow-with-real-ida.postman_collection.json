{
	"info": {
		"_postman_id": "9353aed9-75b6-481c-9cba-b0861d218032",
		"name": "e-Signet Collection MOSIP IDA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30559009"
	},
	"item": [
		{
			"name": "OIDC Client Mgmt",
			"item": [
				{
					"name": "PMS Authentication - ClienID Secret",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"2022-06-10T06:38:13.334Z\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"clientId\": \"mosip-pms-client\",\r\n    \"secretKey\": \"Ap9z87pRXFBDIVqb\",\r\n    \"appId\": \"partner\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{internalUrl}}/authmanager/authenticate/clientidsecretkey",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"authmanager",
								"authenticate",
								"clientidsecretkey"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create OIDC Client PMS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"eval(pm.globals.get('pmlib_code'))",
									"keyPair = pmlib.rs.KEYUTIL.generateKeypair(\"RSA\", 2048);",
									"jwkPrivateKey = pmlib.rs.KEYUTIL.getJWK(keyPair.prvKeyObj);",
									"jwkPublicKey  = pmlib.rs.KEYUTIL.getJWK(keyPair.pubKeyObj);",
									"jwkPublicKey[\"alg\"] = \"RS256\";",
									"jwkPublicKey[\"use\"] = \"sig\";",
									"",
									"pm.environment.set(\"client_public_key\", JSON.stringify(jwkPublicKey))",
									"pm.environment.set(\"client_private_key\", JSON.stringify(jwkPrivateKey));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var clientId = jsonData.response.clientId;",
									"console.log(clientId);",
									"pm.environment.set(\"clientId\",clientId);",
									"pm.environment.set(\"partner_api_key\",clientId);",
									"",
									"pm.test(\"Validate status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.status).to.eql(\"ACTIVE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"version\": \"string\",\r\n  \"requesttime\": \"2022-12-28T12:23:24.448Z\",\r\n  \"metadata\": {},\r\n  \"request\": {\r\n    \"name\": \"casia\",\r\n    \"policyId\": \"26123\",\r\n    \"publicKey\": {{client_public_key}},\r\n    \"authPartnerId\": {{relayingPartyId}},\r\n    \"logoUri\": \"https://casia.qa-triad.mosip.net/images/doctor_logo.png\",\r\n    \"redirectUris\": [\r\n      \"{{redirectionUrl}}\"\r\n    ],\r\n    \"grantTypes\": [\r\n      \"authorization_code\"\r\n    ],\r\n    \"clientAuthMethods\": [\r\n      \"private_key_jwt\"\r\n    ]\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{internalUrl}}/partnermanager/oidc/client",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"partnermanager",
								"oidc",
								"client"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KBA",
			"item": [
				{
					"name": "Get CSRF token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var token = pm.cookies.get(\"XSRF-TOKEN\")",
									"pm.environment.set(\"csrf_token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/csrf/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"csrf",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize / OAuthdetails request V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var btoa = require('btoa');",
									"",
									"var token = pm.cookies.get(\"XSRF-TOKEN\")",
									"pm.environment.set(\"csrf_token\", token);",
									"",
									"pm.test(\"Validate transactionId\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.transactionId).not.equals(null);",
									"    pm.environment.set(\"transaction_id\", jsonData.response.transactionId);",
									"});",
									"",
									"pm.test(\"Validate auth factors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.authFactors[0].name).to.eql(pm.environment.get(\"expected_amr\"));",
									"});",
									"",
									"pm.test(\"set oauth-details-hash\", function () {",
									"    var jsonData = pm.response.json();",
									"    var sha256Hash = CryptoJS.SHA256(JSON.stringify(jsonData.response));",
									"    var base64Encoded = sha256Hash.toString(CryptoJS.enc.Base64);",
									"    // Remove padding characters",
									"    base64Encoded = base64Encoded.replace(/=+$/, '');",
									"    // Replace '+' with '-' and '/' with '_' to convert to base64 URL encoding",
									"    base64Encoded = base64Encoded.replace(/\\+/g, '-').replace(/\\//g, '_');",
									"    console.log(\"base64Encoded : \" + base64Encoded);",
									"    pm.environment.set(\"oauth_details_key\", jsonData.response.transactionId);",
									"    pm.environment.set(\"oauth_details_hash\", base64Encoded);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.globals.get('pmlib_code'))",
									"",
									"const pkce = pmlib.pkceChallenge();",
									"pm.collectionVariables.set(\"codeChallenge\",pkce.code_challenge);",
									"pm.collectionVariables.set(\"codeChallengeMethod\",pkce.code_challenge_method);",
									"pm.collectionVariables.set(\"codeVerifier\",pkce.code_verifier);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"clientId\": \"{{clientId}}\",\n        \"scope\": \"sunbird_rc_insurance_vc_ldp\",\n        \"responseType\": \"code\",\n        \"redirectUri\": \"{{redirectionUrl}}\",\n        \"display\": \"popup\",\n        \"prompt\": \"login\",\n        \"acrValues\": \"mosip:idp:acr:knowledge\",\n        \"nonce\" : \"{{nonce}}\",\n        \"state\" : \"{{state}}\",\n        \"claimsLocales\" : \"en\",\n        \"codeChallenge\" : \"{{codeChallenge}}\",\n        \"codeChallengeMethod\" : \"{{codeChallengeMethod}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authorization/v2/oauth-details",
							"host": [
								"{{url}}"
							],
							"path": [
								"authorization",
								"v2",
								"oauth-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate User V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var token = pm.cookies.get(\"XSRF-TOKEN\")",
									"pm.environment.set(\"csrf_token\", token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							},
							{
								"key": "oauth-details-key",
								"value": "{{oauth_details_key}}",
								"type": "text"
							},
							{
								"key": "oauth-details-hash",
								"value": "{{oauth_details_hash}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"individualId\": \"{{individual_id}}\",\n        \"challengeList\" : [\n            {\n                \"authFactorType\" : \"KBA\",\n                \"challenge\" : \"eyJmdWxsTmFtZSI6IkthaWYgU2lkZGlxdWUiLCJkb2IiOiIyMDAwLTA3LTI2In0\\u003d\",\n                \"format\" : \"base64url-encoded-json\"\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authorization/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"authorization",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var token = pm.cookies.get(\"XSRF-TOKEN\")",
									"pm.environment.set(\"csrf_token\", token);",
									"",
									"pm.test(\"Validate code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.code).not.equals(null);",
									"    pm.collectionVariables.set(\"code\", jsonData.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrf_token}}",
								"type": "text"
							},
							{
								"key": "oauth-details-key",
								"value": "{{oauth_details_key}}",
								"type": "text"
							},
							{
								"key": "oauth-details-hash",
								"value": "{{oauth_details_hash}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestTime\": \"{{$isoTimestamp}}\",\n    \"request\": {\n        \"transactionId\": \"{{transaction_id}}\",\n        \"acceptedClaims\": [],\n        \"permittedAuthorizeScopes\" : []\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authorization/auth-code",
							"host": [
								"{{url}}"
							],
							"path": [
								"authorization",
								"auth-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tokens V2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.globals.get('pmlib_code'))",
									"",
									"// Set headers for JWT",
									"var header = {\t",
									"\t\"alg\": \"RS256\"",
									"};",
									"",
									"const private_key_jwk = JSON.parse(pm.environment.get(\"client_private_key\")); ",
									"//sign token",
									"//Note: Key pair is generated in \"Create OIDC client\" pre-requests script",
									"//generated private and public keys are stored in the postman environment ",
									"const signed_jwt = pmlib.clientAssertPrivateKey(private_key_jwk, pm.environment.get('clientId'), pm.environment.get('aud'), exp = 60,  \"RS256\");",
									"",
									"pm.collectionVariables.set(\"client_assertion\",signed_jwt);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate Id-token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id_token).not.equals(null);",
									"});",
									"",
									"pm.test(\"Validate access-token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).not.equals(null);",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"",
									"    var jwt_parts = pm.environment.get('access_token').split('.'); // header.payload.signature",
									"    var jwt_payload = JSON.parse(atob(jwt_parts[1]));",
									"    pm.environment.set(\"c_nonce\", jwt_payload.c_nonce);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{code}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirectionUrl}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{codeVerifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/oauth/v2/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"oauth",
								"v2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.globals.get('pmlib_code'))",
									"keyPair = pmlib.rs.KEYUTIL.generateKeypair(\"RSA\", 2048);",
									"jwkPrivateKey = pmlib.rs.KEYUTIL.getJWK(keyPair.prvKeyObj);",
									"jwkPublicKey  = pmlib.rs.KEYUTIL.getJWK(keyPair.pubKeyObj);",
									"jwkPublicKey[\"alg\"] = \"RS256\";",
									"jwkPublicKey[\"use\"] = \"sig\";",
									"",
									"pm.environment.set(\"holder_public_key\", JSON.stringify(jwkPublicKey))",
									"pm.environment.set(\"holder_private_key\", JSON.stringify(jwkPrivateKey));",
									"",
									"// Set headers for JWT",
									"var header = {\t",
									"\t\"alg\": \"RS256\",",
									"    \"typ\" : \"openid4vci-proof+jwt\",",
									"    \"jwk\" : JSON.parse(pm.environment.get(\"holder_public_key\"))",
									"};",
									"",
									"",
									"console.log(\"Getting c_nonce >> \" +  pm.environment.get('c_nonce'));",
									"",
									"const signed_jwt = pmlib.jwtSign(JSON.parse(pm.environment.get(\"holder_private_key\")), {",
									"    \"aud\" : pm.environment.get('url'),",
									"\t\"nonce\": pm.environment.get('c_nonce'),",
									"    \"iss\" : pm.environment.get('clientId'),",
									"}, header, exp=600, alg = \"RS256\")",
									"",
									"pm.collectionVariables.set(\"proof_jwt\",signed_jwt);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate c_nonce\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.c_nonce != null) {",
									"        pm.environment.set(\"c_nonce\", jsonData.c_nonce);",
									"        console.log(\"setting c_nonce\");",
									"    }    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"format\": \"ldp_vc\",\n    \"credential_definition\" : { \"type\" : [\"VerifiableCredential\",\"InsuranceCredential\"], \"@context\" : [\"https://www.w3.org/2018/credentials/v1\"]},\n    \"proof\": {\n        \"proof_type\": \"jwt\",\n        \"jwt\": \"{{proof_jwt}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/vci/credential",
							"host": [
								"{{url}}"
							],
							"path": [
								"vci",
								"credential"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Well-known endpoints",
			"item": [
				{
					"name": "JWKS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/oauth/.well-known/jwks.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"oauth",
								".well-known",
								"jwks.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Openid-configuration Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/oidc/.well-known/openid-configuration",
							"host": [
								"{{url}}"
							],
							"path": [
								"oidc",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "VC issuer metadata Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/vci/.well-known/openid-credential-issuer",
							"host": [
								"{{url}}"
							],
							"path": [
								"vci",
								".well-known",
								"openid-credential-issuer"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "clientId",
			"value": "mock-oidc-client"
		},
		{
			"key": "redirectionUrl",
			"value": "https://mosip.io/index.php"
		},
		{
			"key": "relayingPartyId",
			"value": "mock-relaying-party-id"
		},
		{
			"key": "status",
			"value": "\"ACTIVE\""
		},
		{
			"key": "acr_values",
			"value": "level0 level1"
		},
		{
			"key": "scope",
			"value": "openid profile"
		},
		{
			"key": "claims_request_param",
			"value": "{\n            \"userinfo\": {\n                \"email\": {\n                    \"value\": null,\n                    \"values\": null,\n           ..."
		},
		{
			"key": "nonce",
			"value": "2erwER34WW"
		},
		{
			"key": "state",
			"value": "ptOO76SD"
		},
		{
			"key": "expected_amr",
			"value": "\"pin\""
		},
		{
			"key": "transaction_id",
			"value": "ece56bfa-d0c2-46ce-a5a2-8500dfb393a7"
		},
		{
			"key": "individual_id",
			"value": "8267411571"
		},
		{
			"key": "auth_pin",
			"value": "34789"
		},
		{
			"key": "url",
			"value": "http://localhost:8088/v1/idp"
		},
		{
			"key": "url",
			"value": "",
			"disabled": true
		},
		{
			"key": "code",
			"value": ""
		},
		{
			"key": "client_assertion",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "linkTransactionId",
			"value": ""
		},
		{
			"key": "wla_challenge",
			"value": ""
		},
		{
			"key": "client_secret",
			"value": "JfoG3eLWLW7iSZDt"
		},
		{
			"key": "client_secret",
			"value": ""
		},
		{
			"key": "csrf_token",
			"value": "08a17840-da3c-4b93-9ab3-83d9b297ac68",
			"type": "string"
		},
		{
			"key": "codeChallenge",
			"value": ""
		},
		{
			"key": "codeChallengeMethod",
			"value": ""
		},
		{
			"key": "codeVerifier",
			"value": ""
		}
	]
}